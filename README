Συμμετέχοντες:
Δημάκης Αντώνιος - sdi1900047
Διαλιάτσης Σπυρίδων - sdi1900051
Μυστριώτης Δημήτριος - sdi1900130

Έχουμε υλοποιήσει όλες τις συναρτήσεις και τις λειτουργίες που ζητούνται στην εκφώνηση.

Θεωρήσαμε πως, όπως εξηγήθηκε στην παρουσίαση, ένα δευτερεύον αρχείο ενημερώνεται με εγγραφές παράλληλα με το πρωτεύον. Όταν δίνεται μια κύρια εγγραφή
στο πρωτεύον, δίνεται μετά η αντίστοιχη δευτερεύουσα σε κάθε δευτερεύον, και καλούνται και οι αντίστοιχες update.

Η hash function που έχουμε χρησιμοποιήσει για ο δευτερεύον ευρετήριο παίρνει ένα string και επιστρέφει ένα νέο ψευδοτυχαίο unsigned int. Άρα έχουμε
8*sizeof(uint) bits πληροφορίας. Για λόγους απόδοσης, επειδή στα μηχανήματά μας και στης σχολής υπάρχει μεγάλη καθυστέρηση όταν πλησιάζουμε το θεωρητικό
μέγιστο βάθος 8*sizeof(uint), αυτό έχει οριστεί σε 8*sizeof(uint)-8.

Στην πρώτη εργασία, είχαμε λάβει υπόψιν κατά τον σχεδιασμό του αλγορίθμου και την περίπτωση που έρχονται πολλές εγγραφές με το ίδιο id, οπότε
δημιουργούνται αλυσίδες υπερχείλισης αν έχει γεμίσει ένας κάδος και έχουμε φτάσει το μέγιστο βάθος. Εφόσον μετά που το κάναμε αυτό δόθηκε η διευκρίνηση
πως δεν χρειάζεται να λάβουμε υπόψιν αυτήν την περίπτωση, στο δευτερεύον ευρετήριο δεν δίνεται αυτή η δυνατότητα (θεωρούμε πως όλες οι εγγραφές με
το ίδιο κλειδί χωρούν σε ένα block). Στον κώδικα έχουμε αφήσει την δυνατότητα για αυτό (δείκτη από κάθε κάδο στον πιθανό επόμενο στην αλυσίδα),
αλλά δεν την χρησιμοποιούμε.

Στην υλοποίησή μας κάθε κάδος περιέχεται σε ακριβώς ένα block, έτσι τα δεδομένα διατηρούνται σε έναν πίνακα μετά από τις δευτερεύουσες
πληροφορίες που αποθηκεύονται στην αρχή του block (που είναι το πλήθος εγγραφών στο block, ο δείκτης προς την θέση του επόμενου (για περίπτωση
υπερχείλισης) και το τοπικό βάθος).

Ο ίδιος ο πίνακας κατακερματισμού κρατάται και αυτός στην μνήμη σε blocks. Κάθε block περιέχει έναν δείκτη προς την θέση του επόμενου και έναν
πίνακα με τις θέσεις των αντιστοίχων κάδων. Έτσι ο πίνακας μπορεί να γίνει αυθαίρετα μεγάλος και δεν περιορίζεται από το μέγεθος του block.

Στην αρχή κάθε αρχείου κρατάμε και ένα block για στατιστικές πληροφορίες, όπως τις συνολικές εγγραφές, τους συνολικούς κάδους και το global depth.
Στην περίπτωση του δευτερεύοντος ευρετηρίου, κρατάμε και το όνομα του αντίσχοιχου πρωτεύοντος όπως αυτό δίνεται στην SHT_CreateSecondaryIndex.

Για κάθε ανοιχτό αρχείο κρατάμε στην μνήμη κάποιες πληροφορίες. Οι βασικότερες είναι ο πίνακας/ευρετήριο, το global depth και το fileDesc που επιστρέφεται
για το συγκεκριμένο αρχείο από το επίπεδο block. Οι μετέπειτα προσβάσεις στον πίνακα για την εύρεση στοιχείων στην δομή μπορεί έτσι να γίνει σε σταθερό
χρόνο με μια πρόσβαση στον πίνακα στην μνήμη, και όχι με διάσχιση των blocks του πίνακα στον δίσκο. Ενώ ένα αρχείο παραμένει ανοιχτό οι αλλαγές στον
πίνακα και η πιθανή μεγέθυνσή του γίνονται μόνο στην μνήμη, ενώ όταν κλείσει γράφονται στον δίσκο.

Για να διατηρήσουμε την εξωτερική συμπεριφορά που ζητά η εκφώνηση, δηλαδή να μπορεί ο χρήστης να ανοίξει πολλές φορές το ίδιο αρχείο και να επιστραφεί
άλλη θέση στον πίνακα ανοιχτών αρχείων, κρατώνται σε αυτόν δύο επιπλέον πράγματα, η "βασική θέση" και το όνομα του αρχείου. Καθε αρχείο είναι ουσιαστικά
ανοιγμένο στην μνήμη μόνο μία φορά (ένα μόνο αντίγραφο του πίνακα στην μνήμη), και οι παραπάνω θέσεις στον πίνακα υπάρχουν για την διευκόλυνση του
χρήστη. Όταν ανοίξει για δεύτερη φορά το ίδιο αρχείο, η νέα θέση στον πίνακα δείχνει προς την "βασική", και από εκεί γίνονται όλες οι προσβάσεις και
οι αλλαγές στα δεδομένα. Το αρχείο κλείνει στο επίπεδο block και ο πίνακας μεταφέρεται στην μνήμη όταν ο χρήστης ζητήσει το κλείσιμο της τελευταίας
αναφοράς το εν λόγω αρχείου στον πίνακα ανοιχτών αρχείων.

Αφού η HashStatistics παίρνει ως όρισμα filename και όχι indexDesc θεωρήσαμε πως πρέπει να δουλεύει και για ανοιχτό και για κλειστό αρχείο. Στην πρώτη
περίπτωση προσπελαύνει το αρχείο χρησιμοποιώντας τον πίνακα στην μνήμη, αλλιώς αυτόν που αποθηκεύεται σε block στον δίσκο.

Στην πρώτη εργασία είχουμε υλοποιήσει δύο συναρτήσεις main, την main.c και την error_main.c. Αυτές τροποποιήθηκαν ώστε να δουλεύουν με τις αλλαγές που
έγιναν στην HT_InsertEntry (που τώρα επιστρέφει και τις αλλαγές στον πίνακα). Με τον ίδιο τρόπο τροποποιήθηκε και η δοσμένη bf_main.c.
Η sht_main.c ήταν άδεια και δεν την πειράξαμε, αφού ήταν στα "παραδείγματα".

Για τον έλεγχο της λειτουργίας του δευτερεύοντος ευρετηρίου, φτιάξαμε τρεις νέες συναρτήσεις main, την secondary_main.c, την secondary_main_big.c
και την error_secondary_main.c.
Η secondary_main.c δοκιμάζει διάφορες λειτουργίες των συναρτήσεων. Αρχικοποιεί τρία αρχεία, ένα πρωτεύον και δύο δευτερεύοντα, το πρώτο με κλειδί το
επίθετο και το δεύτερο με κλειδί την πόλη. Βάζει κάποιες εγγραφές στο πρωτεύον, ενημερώνοντας παράλληλα τα δευτερεύοντα. Μετά τυπώνει και στα δύο
δευτερεύοντα τις εγγραφές, πρώτα για συγκεκριμένο κλειδί και μετά με NULL. Μετά καλεί στα δευτερεύοντα την SHT_HashStatistics ενώ είναι ακόμα ανοιχτά.
Μετά καλεί και στα δύο την SHT_InnerJoin με τον εαυτό τους, με και χωρίς συγκεκριμένο κλειδί. Μετά κλείνει όλα τα αρχεία και τέλος ξανατρέχει για τα
δευτερεύοντα την SHT_HashStatistics αφού έχουν κλείσει. Το πλήθος των εγγραφών είναι μικρό ώστε το αποτέλεσμα να μπορεί να διαβάζεται.
Η secondary_main_big.c είναι ίδια με την secondary_main.c αλλά το πλήθος των εγγραφών είναι μεγάλο ώστε να μπορεί να ελεγθεί πως οι δομές λειτουργούν
σωστά στην περίπτωση που το ευρετήριο χρειαστεί να μεγαλώσει.
Στην error_secondary_main.c ο χρήστης επιλέγει μία από δύο περιπτώσεις που μπορεί να επιστραφεί λάθος από τις συναρτήσεις του δευτερεύοντος ευρετηρίου
(στην περίπτωση που δωθεί attribute που δεν υποστηρίζεται ή ζητηθεί να γίνει SHT_InnerJoin σε δευτερεύοντα αρχεία με διαφορετικό attribute), ώστε να
ελεγθεί το error handling.

Το makefile που δινόταν για τις bf_main και ht_main δεν παρήγαγε .ο αρχεία και έβαζε το εκτελέσιμο στο build. Η μόνη αλλαγή που του κάναμε σε αυτό
είναι να βάζουμε το εκτελέσιμο στο bin, ενώ σε αντίθεση με τις δικές μας main δεν το βάλαμε να παράγει .ο. Με το make <όνομα main>, γίνονται οι
κατάλληλες ενέργειες ώστε να μπορεί να τρέξει η συγκεκριμένη main, ενώ με το make run τρέχει η τελευταία που μεταγλωττίστηκε. Me make clean σβήνονται
τα ενδιάμεσα αρχεία, το εκτελέσιμο, καθώς και τα πιθανά αρχεία δεδομένων που έχουν παραχθεί.